import { Injectable } from '@nestjs/common';
import { PrismaService } from '@/common/service/prisma/prisma.service';
import { Response } from 'express';
import { exportTable } from '@/common/utils';
import { Query${className}Dto, Create${className}Dto, Update${className}Dto } from '../dto/index';
import { Prisma } from '@prismaClient';
import { isNotEmpty,isEmpty } from 'class-validator';
@Injectable()
export class ${BusinessName}Service {
  constructor(private prisma: PrismaService) { }
  #set($service="this.prisma."+$modelName)

  /**@description 查询${functionName}所有 */
  async select${BusinessName}All () {
    return ${service}.findMany()
  }

  /**@description 分页查询${functionName}列表 */
  async select${BusinessName}List (q: Query${className}Dto) {
    let queryCondition: Prisma.${modelName1}WhereInput = {}
    #foreach($column in $columns)
    #set($queryType=$column.queryType)
    #set($javaField=$column.javaField)
    #set($javaType=$column.javaType)
    #set($columnName=$column.columnName)
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #if($column.query)
      #if($column.queryType == "EQ")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              equals: q.$javaField
            }
        }
      #elseif($queryType == "NE")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              not: q.$javaField
            }
        }
      #elseif($queryType == "GT")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              gt: q.$javaField
            }
        }
      #elseif($queryType == "GTE")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              gte: q.$javaField
            }
        }
      #elseif($queryType == "LT")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              lt: q.$javaField
            }
        }
      #elseif($queryType == "LTE")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              lte: q.$javaField
            }
        }
      #elseif($queryType == "LIKE")
        if (isNotEmpty(q["$javaField"])) {
            queryCondition.$javaField = {
              contains: q.$javaField
            }
        }
      #elseif($queryType == "BETWEEN")
        if (isNotEmpty(q.params.begin$AttrName) && isNotEmpty(q.params.end$AttrName)) {
            queryCondition.$javaField = {
              lte: q.params.end$AttrName,
              gte: q.params.begin$AttrName
            }
        }
      #end
    #end
    #end
    return {
      rows: await ${service}.findMany({
        skip: (q.pageNum - 1) * q.pageSize,
        take: q.pageSize,
        where: queryCondition,
      }),
      total: await ${service}.count({
        where: queryCondition
      })
    }
  }

  /**@description 查询${functionName}详情 */
  async select${BusinessName}By${UpperPkName} (${pkName}: ${pkColumn.javaType.toLowerCase()}) {
    return ${service}.findUnique({
      where: {
        ${pkName}
      }
    })
  }

  
  /**@description 新增${functionName} */
  async add${BusinessName} (${entityName}: Create${className}Dto) {
    #foreach($column in $columns)
    #if(($column.columnName != $pkColumn.columnName  || !$pkColumn.increment) && $column.columnName!="uuid")
    if(isEmpty(${entityName}["$column.javaField"])) {
      delete ${entityName}["$column.javaField"]
    } 
    #end
    #end
    return await ${service}.create({
      data: ${entityName}
    })
  }

  /**@description 修改${functionName} */
  async update${BusinessName} (${entityName}: Update${className}Dto) {
    #foreach($column in $columns)
    #if($column.columnName != $pkColumn.columnName  && $column.columnName !="uuid")
    if(isEmpty(${entityName}["$column.javaField"])) {
      delete ${entityName}["$column.javaField"]
    } 
    #end
    #end
    return await ${service}.update({
        where: {
          ${pkName}: ${entityName}.${pkName}
        },
        data: ${entityName}
      })
  }

  /**@description 批量删除${functionName} */
  async delete${BusinessName}By${UpperPkName}s (${pkName}s: ${pkColumn.javaType.toLowerCase()}[]) {
    return ${service}.deleteMany({
      where: {
        ${pkName}: {
          in: ${pkName}s
        }
      }
    })
  }

  /**@description 单个删除${functionName} */
  async delete${BusinessName}By${UpperPkName} (${pkName}: ${pkColumn.javaType.toLowerCase()}) {
    return ${service}.delete({
      where: {
        ${pkName}
      }
    })
  }

  /**@description 导出${functionName}所有数据为xlsx */
  async export${BusinessName} (res: Response) {
    let title = ${columnNames}
    let data = (await ${service}.findMany()).map(v => Object.values(v))
    data.unshift(title)
    exportTable(data, res)
  }
}